/*! @module Public
 */

/*! @module System
 */

/*! @module FSEvents
 */

#define _GNU_SOURCE

#include "fsevents_config.h"
#include "util.h"

#define ADD_ICONST(name) do {                   \
        add_integer_constant(#name, name, 0);   \
} while(0);

#ifdef HAVE_FRAMEWORK_CORESERVICES


//#import <Foundation/Foundation.h>
#import <CoreServices/CoreServices.h>

DECLARATIONS

void low_stop();
struct pike_string * string_from_cfstring(CFStringRef cfString);

static void event_callback(ConstFSEventStreamRef streamRef,
                             void *clientCallBackInfo,
                             size_t numEvents,
                             void *eventPaths,
                             const FSEventStreamEventFlags eventFlags[],
                             const FSEventStreamEventId eventIds[]);

/*! @class EventStream
 */

PIKECLASS EventStream
{
  CVAR CFRunLoopRef runLoop;
  CVAR FSEventStreamRef stream;
  CVAR int isRunning;
  CVAR CFArrayRef _paths;
  CVAR FSEventStreamEventId _sinceWhen;
  CVAR FSEventStreamCreateFlags _flags;
  CVAR CFAbsoluteTime _latency;

  PIKEVAR function callback_func;


/*! @decl int is_started()
 *!
 */
PIKEFUN int is_started()
{
  RETURN(THIS->isRunning);
}

/*! @decl void flush_async()
 *!
 */
PIKEFUN void flush_async()
{
  if(THIS->stream)
	FSEventStreamFlushAsync(THIS->stream);
  else
    Pike_error("FSEvents.EventStream: not started\n");
}

/*! @decl void flush_sync()
 *!
 */
PIKEFUN void flush_sync()
{
  if(THIS->stream)
	FSEventStreamFlushSync(THIS->stream);
  else
    Pike_error("FSEvents.EventStream: not started\n");
}

/*! @decl void create(array(string) paths)
 *!   Creates a new Public.System.FSEvents.EventStream object
 *!
 */
PIKEFUN void create(array paths, float latency, int|void sinceWhen, int|void flags)
{
  int idx = 0, cnt = 0;
  
  THIS->isRunning = 0;
  THIS->_latency = latency;

  if(sinceWhen && sinceWhen->type == T_INT)
  {
    THIS->_sinceWhen = sinceWhen->u.integer;
  }
  else
  {
    THIS->_sinceWhen = kFSEventStreamEventIdSinceNow;
  }

  if(flags && flags->type == T_INT)
  {
    THIS->_flags = flags->u.integer;
  }
  else
  {
    THIS->_flags = kFSEventStreamCreateFlagNone;
  }
  
  THIS->_paths = CFArrayCreateMutable(NULL, 0, NULL);
  CFRetain(THIS->_paths);

  if(paths && paths->size)
  {

    for(idx = 0; idx < paths->size; idx++)
    {
      struct svalue sv;
	  CFStringRef str;
      if(ITEM(paths)[idx].type != T_STRING) continue;
      sv = ITEM(paths)[idx];
	  push_svalue(&sv);
	  f_string_to_utf8(1);
      str = CFStringCreateWithBytes(NULL, (const UInt8 *)(Pike_sp[-1].u.string->str), (CFIndex)Pike_sp[-1].u.string->len, kCFStringEncodingUTF8, false);
	  pop_stack();
	  CFArrayInsertValueAtIndex( (CFMutableArrayRef)THIS->_paths, cnt, str);
	  cnt++;
    }
  }
	
  pop_n_elems(args);

  return;
}

/*! @decl void add_path(string path)
 *!   Add a path to the monitor list.
 *!
 *!  @note
 *!    this can only be called when the monitor is stopped.
 */
PIKEFUN void add_path(string path)
{
  if(THIS->isRunning)
  {
	Pike_error("Cannot add paths while monitor is started.\n");
  }

  if(path && path->len)
  {
	int size;
    CFStringRef str;
	f_string_to_utf8(1);
    str = CFStringCreateWithBytes(NULL, (const UInt8 *)(Pike_sp[-1].u.string->str), (CFIndex)Pike_sp[-1].u.string->len, kCFStringEncodingUTF8, false);
	size = CFArrayGetCount(THIS->_paths);
	CFArrayInsertValueAtIndex( (CFMutableArrayRef)THIS->_paths, size, str);
  }
  pop_stack();
}

PIKEFUN void set_callback(function callback)
{
  assign_svalue(&THIS->callback_func, callback);
  pop_stack();
}

// TODO we should allow the runloop to be specified.
PIKEFUN void start()
{
  	FSEventStreamContext context;

    if(THIS->isRunning)
    {
      Pike_error("monitor is already running.\n");
    }

	if(CFArrayGetCount(THIS->_paths))
	{	
		THIS->runLoop = CFRunLoopGetCurrent();

	  	context.version = 0;
	  	context.info = THIS;
	  	context.retain = NULL;
	  	context.release = NULL;
	  	context.copyDescription = NULL;

		if(!THIS->_paths)
      		Pike_error("no paths.\n");
			if(!THIS->_sinceWhen)
	      		Pike_error("no startdate.\n");
				if(!THIS->_latency)
		      		Pike_error("no latency.\n");
printf("creating stream.\n");

	  	THIS->stream = FSEventStreamCreate(kCFAllocatorDefault,
			&event_callback,
			&context,
			THIS->_paths,
			THIS->_sinceWhen,
			THIS->_latency,
			THIS->_flags |
			 kFSEventStreamCreateFlagUseCFTypes
			);
		printf("created.\n");
		THIS->isRunning = 1;
		FSEventStreamScheduleWithRunLoop(THIS->stream, THIS->runLoop, kCFRunLoopDefaultMode);
		FSEventStreamStart(THIS->stream);
	}
	else
	{
		Pike_error("No paths registered for monitoring.\n");
	}
}

PIKEFUN void stop()
{
  low_stop();
}

void low_stop()
{
  if(THIS->isRunning)
  {
    FSEventStreamStop(THIS->stream);
    FSEventStreamUnscheduleFromRunLoop(THIS->stream, THIS->runLoop, kCFRunLoopDefaultMode);
	FSEventStreamInvalidate(THIS->stream);
  	FSEventStreamRelease(THIS->stream);
    THIS->isRunning = 0;
  }
}


PIKE_MODULE_INIT
{
 ADD_ICONST(kFSEventStreamEventFlagNone);
 ADD_ICONST(kFSEventStreamEventFlagMustScanSubDirs);
 ADD_ICONST(kFSEventStreamEventFlagUserDropped);
 ADD_ICONST(kFSEventStreamEventFlagKernelDropped);
 ADD_ICONST(kFSEventStreamEventFlagEventIdsWrapped);
 ADD_ICONST(kFSEventStreamEventFlagHistoryDone);
 ADD_ICONST(kFSEventStreamEventFlagRootChanged);
 ADD_ICONST(kFSEventStreamEventFlagMount);
 ADD_ICONST(kFSEventStreamEventFlagUnmount);
 ADD_ICONST(kFSEventStreamEventFlagItemCreated);
 ADD_ICONST(kFSEventStreamEventFlagItemRemoved);
 ADD_ICONST(kFSEventStreamEventFlagItemInodeMetaMod);
 ADD_ICONST(kFSEventStreamEventFlagItemRenamed);
 ADD_ICONST(kFSEventStreamEventFlagItemModified);
 ADD_ICONST(kFSEventStreamEventFlagItemFinderInfoMod);
 ADD_ICONST(kFSEventStreamEventFlagItemChangeOwner);
 ADD_ICONST(kFSEventStreamEventFlagItemXattrMod);
 ADD_ICONST(kFSEventStreamEventFlagItemIsFile);
 ADD_ICONST(kFSEventStreamEventFlagItemIsDir);
 ADD_ICONST(kFSEventStreamEventFlagItemIsSymlink);


// flags for the stream creation
 ADD_ICONST(kFSEventStreamCreateFlagFileEvents);
 ADD_ICONST(kFSEventStreamCreateFlagIgnoreSelf);
 ADD_ICONST(kFSEventStreamCreateFlagWatchRoot);
 ADD_ICONST(kFSEventStreamCreateFlagNoDefer);
 ADD_ICONST(kFSEventStreamCreateFlagNone);

  ADD_ICONST(kFSEventStreamEventIdSinceNow);

  INIT;
 
}


PIKE_MODULE_EXIT 
{
  EXIT;
  low_stop();
  if(THIS->_paths) CFRelease(THIS->_paths);  
}

}
#endif /* HAVE_FRAMEWORK_CORESERVICES */


/**
 * FSEvents callback function. The frequency at which this callback is
 * called depends upon the notification latency value. This callback is usually
 * called with more than one event and so multiple calls to the callback occur.
 *
 * @param streamRef          The calling stream reference
 * @param clientCallBackInfo Any client callback info that was supplied when the stream was created
 * @param numEvents          The number of events being supplied
 * @param eventPaths         An array of the event's paths
 * @param eventFlags         An array of flags associated with the events
 * @param eventIds           An array of IDs associated with the events
 */


static void event_callback(ConstFSEventStreamRef streamRef,
                              void *clientCallBackInfo,
                              size_t numEvents,
                              void *eventPaths,
                              const FSEventStreamEventFlags eventFlags[],
                              const FSEventStreamEventId eventIds[])
{
  size_t cnt = 0;
  for(cnt = 0; cnt < numEvents; cnt++)
  {
     CFStringRef eventPath;
     struct pike_string * str;
     const char * u8s;
	 struct EventStream_struct * eventStreamObj;

	 eventPath = CFArrayGetValueAtIndex(eventPaths, (CFIndex)cnt);
	 str = string_from_cfstring(eventPath);
	 push_string(str);
	 f_utf8_to_string(1);
	 push_int(eventFlags[cnt]);
	 push_int(eventIds[cnt]);
	 eventStreamObj = (struct EventStream_struct *)(clientCallBackInfo);
 	 apply_svalue(&eventStreamObj->callback_func, 3);
  }
}

struct pike_string * string_from_cfstring(CFStringRef cfString)
{
  const char *useUTF8StringPtr = NULL;
  UInt8 *freeUTF8StringPtr = NULL;
  struct pike_string * str = NULL;
  long utf8Length;

  CFIndex stringLength = CFStringGetLength(cfString), usedBytes = 0L;

  if((useUTF8StringPtr = CFStringGetCStringPtr(cfString, kCFStringEncodingUTF8)) == NULL) {
    if((freeUTF8StringPtr = malloc(stringLength + 1L)) != NULL) {
      CFStringGetBytes(cfString, CFRangeMake(0L, stringLength), kCFStringEncodingUTF8, '?', false, freeUTF8StringPtr, stringLength, &usedBytes);
      freeUTF8StringPtr[usedBytes] = 0;
      useUTF8StringPtr = (const char *)freeUTF8StringPtr;
    }
  }

  utf8Length = (long)((freeUTF8StringPtr != NULL) ? usedBytes : stringLength);

  if(useUTF8StringPtr != NULL) {
    // useUTF8StringPtr points to a NULL terminated UTF8 encoded string.
    // utf8Length contains the length of the UTF8 string.
    str = make_shared_binary_string(useUTF8StringPtr, utf8Length);
  }

  if(freeUTF8StringPtr != NULL) { free(freeUTF8StringPtr); freeUTF8StringPtr = NULL; }

  return str;
}


/*! @endclass
 */

/*! @endmodule
 */

/*! @endmodule
 */

/*! @endmodule
 */


